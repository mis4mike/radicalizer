#!/usr/bin/env coffee

cmd_path      = process.argv[1].replace(/\/svg2jadepartial/, "")
modules_path  = "#{cmd_path}/node_modules"

require.paths.push modules_path

fs            = require 'fs'
spawn         = require('child_process').spawn
args          = require("argsparser").parse()
Lazy          = require("lazy")  
INDENT        = 2

print_help_and_exit = () ->
  console.log ""
  console.log "svg2jadepartial [-i] <infile[s]> -o <outpath>"
  console.log "  [-i]  One or more svg files or directories with svg files for input."
  console.log "  [-o]  Out path. Default is current directory."
  console.log ""
  console.log "NOTES:"
  console.log "  Outputted file[s] is dependent upon the amount of workspaces within each file."
  console.log ""
  process.exit(1)
  
print_help_and_exit() if args['-h']
  
infiles = args['-i'] if args['-i']
infiles = args['coffee'].slice(1) if not infiles
outpath = args['-o']
outpath = if outpath then fs.realpathSync(outpath) else fs.realpathSync('./')

print_help_and_exit if not infiles

infiles.forEach (file) ->
  file = fs.realpathSync("#{file}")
  console.log file
  stats = fs.stat file, (err, stats) ->
    if stats.isDirectory()
      fs.readdir file, (err, files) ->
        files.forEach (entry) ->
          if /\.svg$/.test entry
            console.log "Reading file #{entry}"
            loop_files ["#{file}/#{entry}"], outpath
            
    else if stats.isFile()
      console.log "Reading file #{file}"
      loop_files [file], outpath


# Repeat any string count times, great for generating empty strings.
# For example indentation spaces.
String.prototype.repeat = (count) ->
  if (count < 1) 
    return ''
  
  result  = ''
  pattern = this.valueOf()
  
  while (count > 0) 
    if (count & 1)
      result += pattern
    
    count >>= 1
    pattern += pattern
  
  return result

# Trim any whitespace from beginning and end of string.
String.prototype.trim = (value) ->
  value ?= "\\s"
  String(this).replace(new RegExp("^[#{value}]+|[#{value}]+$", 'g'), '')

# Trim any whitespace from begining of string.
String.prototype.ltrim = (value) ->
  value ?= "\\s"
  String(this).replace(new RegExp("^[#{value}]+", 'g'), '')

# Trim any whitespace from end of string
String.prototype.rtrim = () ->
  value ?= "\\s"
  String(this).replace(new RegExp("[#{value}]+$", 'g'), '')

Array.prototype.contains = (obj) ->
  i = this.length;
  while i--
    if this[i] == obj
      return true;
  false;

Array.prototype.best_of = (values) ->
  result = (i for i in this when values.contains(i))
  result = if not result or result.length == 0 then this else result
  result[0]

Array.prototype.remove = (s) ->
  index = this.indexOf(s)
  if index != -1
    this.splice(index, 1)
  

Array.prototype.remove_all = (s) ->
  @.splice(i, 1) for itm in s when i = @.indexOf(itm) != -1
  

Array.prototype.insert_before = (itm, new_itm) ->
  i = @.indexOf(itm)
  @.splice(i, 0, new_itm)

Array.prototype.insert_after = (itm, new_itm) ->
  i = @.indexOf(itm)
  @.splice(i+1, 0, new_itm)

Array.prototype.previous = (itm) ->
  @[@.indexOf(itm)-1]

Array.prototype.next = (itm) ->
  @[@.indexOf(itm)+1]


uid = (() ->
    id=0
    () -> "SVGUID_#{id++}_"
  )()
  

# Find out the amount of indentation in string
line_indent = (line) ->
  match = /^(\s*)/m.exec line
  match?[1].length

# Remove any ascii-encoding and replace with real characters.
line_wash = (line) ->
  r = /_x(\w\w)_/
  while r.test line
    m = r.exec line
    line = line.replace(m[0], String.fromCharCode(parseInt(m[1], 16)))
  line

# Convert given file into Jade and perform callback with the jade
# file name as argument.
html2jade = (file, callback) ->
  p = spawn('html2jade', [file])
  
  p.stdout.on 'data', (data) -> l.h "stdout: #{data}"      
  p.stderr.on 'data', (data) -> l.h "stderr: #{data}"
  p.on        'exit', (code) -> callback file.replace ".svg", '.jade'
  
# For each svg file in path, convert to jade and perform callback
# passing the jade file name.
each_jade_in_path = (path, callback) ->
  fs.readdir path, (err, files) ->
    for file in files
      if /\.svg/.test(file)
        html2jade "#{path}/#{file}", callback

each_jade_in_files = (files, callback) ->
  for file in files
    if /\.svg/.test(file)
      html2jade file, callback


# For each line in file, perform callback with the line.
# Additional; Filter any lines that is not interesting.
#             Concatinate any multiline strings into single line.
# Finaly perform finished whenever all lines is read from file.
each_line = (file, callback, finished) ->
  last_line = null
  stream    = fs.createReadStream(file)
  saved     = []
  
  lazy = Lazy(stream).lines.map(String).filter (line) -> 
    not (
      # Filter the not interesting rows in the top of the file
      /^html$/i.test(line) or 
      /^\s+body$/i.test(line) or 
      /^\s+\/\/\s+Generator.*$/i.test(line)
      )
  
  lazy.forEach (line) ->
    # These camel cased params is destroyed by html2jade. We are just
    # correcting them.
    line = line.replace('lineargradient', 'linearGradient').
      replace('gradientunits', 'gradientUnits').
      replace('gradienttransform', 'gradientTransform')
    
    
    # We only emit those lines that are whole lines, multilines will 
    # become joined
    if /^\t/g.test(line)
      last_line += line.replace(/\t/g, '').replace(/(\r\n|\n|\r)/gm," ")
    else
      save = callback(last_line) if last_line
      saved.push save if save
      last_line = line.replace(/(\r\n|\n|\r)/gm," ")
    
  stream.once 'end', -> 
    save = callback(last_line) if last_line
    saved.push save if save
    finished(saved)
  

# Loop all occurrancies of regex 'rx' in str and spawn f with match.
replace_each_match_in = (rx, str, f) ->
  while m = rx.exec str
    res = f(m)
    str = str.replace(m[0], res)
  str


# Class that holds the tag information such as;
#   name of tag
#   id of element
#   classes of element
class Tag
  # @id
  # @name
  # @classes
  # @tag
  # @assignment
  constructor: (@tag) ->
    @id         = null
    @name       = null
    @assignment = null
    @classes    = []
    @tag        = line_wash @tag

    name_match  = /^\s*([^#\(]+)/m.exec(@tag)
    id_match    = /^.+#([^\.]+)/m.exec(@tag)
    classes     = @tag
    
    if name_match
      @name     = name_match[1]
      classes   = classes.replace(name_match[0], "") if classes
    
    if id_match
      @id       = id_match[1]
      classes   = @tag.replace(id_match[0], "") if classes
    
    if classes and /\!\=/.test(classes)
      assign_tmp  = classes.split('!=')
      classes     = assign_tmp[0]
      @assignment = { identifier: assign_tmp[1].ltrim('_'), instruction: '!=' } if assign_tmp[1]
      
    else if classes and /\=/.test(classes)
      assign_tmp  = classes.split('=')
      classes     = assign_tmp[0]
      @assignment = { identifier: assign_tmp[1].ltrim('_'), instruction: '=' } if assign_tmp[1]
    
    if classes
      classes   = classes.split('.')
      classes.shift()
      @classes  = classes
  

# Class that holds any arguments passed to tag.
# Any properties is variadic and depends upon the definition.
class Args
  # Variadic properties
  constructor: (args) ->
    other = @
    if parts = args?.split(', ')
      (() -> 
        x = part.split('=')
        x[1] = x[1].replace(/^\'/, '').replace(/\'$/, '').trim()
        other[x[0]] = x[1]
      )() for part in parts
  

# Represents a physical line in the jade file.
class Line
  # @parent
  # @children
  # @last_child
  # @indent
  # @value
  # @tag
  # @args
  # @translation
  # @invalidated
  
  reconstruct: (line) ->
    @line         = line
    tag_match     = /^\s*([^\(\n]+)/m.exec(line)                              # Match tag
    args_match    = /\((.*)\)/m.exec(line)                                    # Match arguments
    @indent       = if tag_match then line_indent(tag_match[0]) else 0        # Get indent
    value         = line                                                      # Init value with line
    value         = value.replace(tag_match[0], "") if tag_match and value    # Remove tag from line
    @value        = value.replace(args_match[0], "") if args_match and value  # Remove args from line, only value left now
    @value        = @value.trim() if @value
    @value        = null if @value and @value.length = 0
    @tag          = new Tag(tag_match?[1])                                    # Get tag
    @args         = new Args(args_match?[1])                                  # Get args
    @use_line     = /^\s+\-/.test line
    
  # Takes the file name and the line and constructs the line object.
  constructor: (@file, @line) ->
    @parent       = null
    @children     = []
    @decorations  = { before:[], after:[] } # Not used right now 
    @last_child   = null
    @invalidated  = false
    @is_workspace = false
    @reconstruct(@line)
    
    
  
  
  # Calculate the heirarchy level of the element
  level: () ->
    return 0 if not @parent or not @parent.tag.tag
    # console.log @parent
    1 + @parent.level()
  
  
  # Output the line as text. Optionally adjust indent and allow html
  # for beautifull debug formating.
  #   indent_adjust: If line is originally indented by 4 spaces, you 
  #                  can pass -2 to make output indent by 2. If you 
  #                  pass 2 it would indent by 6.
  # 
  #   format: Pass false if you want clean jade output. Pass true if
  #           you are generating html debug output.
  # 
  to_s: (indent_adjust = 0, format = false) ->
    b = '';     be = '';      i = '';     ie = ''
    if format
      b = '<b>';  be = '</b>';  i = '<i>';  ie = '</i>'
    
    # Strange, -1 would be understandable, but -2, i dont know if thats right
    oindent       = ' '.repeat((@level()-2)*INDENT)
    
    if @use_line
      @line.replace(/^\s+/, oindent)
    else
      otag_name     = if @tag.name                then @tag.name                    else ""
      otag_id       = if @tag.id                  then "##{@tag.id}"                else ""
      otag_classes  = if @tag.classes.length > 0  then ".#{@tag.classes.join('.')}" else ""
      ovalue        = if @value                   then @value                       else ""
      oargs         = for name, value of @args when value
        "#{name}='#{b}#{value}#{be}'"
      var_name      = ""
  
      if @tag.id
        if /\$\(([^\)]+)\)/.test @tag.id
          var_name = replace_each_match_in /\$\(([^\)]+)\)/, @tag.id, (m) ->
            "_dollar__lp_#{m[1]}_rp_"
      
          var_name = var_name.replace /-/g, "_"
      
          oargs.unshift "id=#{b}#{var_name}#{be}"
        else
          oargs.unshift "id='#{b}#{@tag.id}#{be}'"
  
      oargs         = "#{b}(#{be}#{oargs.join(', ')}#{b})#{be}" if oargs.length > 0
      ovar_decl     = if var_name != ""
                        var_value = replace_each_match_in /\$\(([^\)]+)\)/, "\"#{@tag.id}\"", (m) ->
                          "\"+#{m[1]}+\""
                        var_value = var_value.replace /\+""$/, ''
                        "#{oindent}- var #{var_name} = #{var_value}\n"
                      else
                        ""
      "#{ovar_decl}#{oindent}#{i}#{otag_name}#{ie}#{otag_classes}#{oargs} #{ovalue}".rtrim()
  
  
  decorate_before:(line) ->
    @decorations.before.push line
  decorate_after:(line) ->
    @decorations.after.push line
  
  insert_sibling_before: (child) ->
    child.parent = @parent
    @parent.children.insert_before(@, child)
  
  insert_sibling_after: (child) ->
    child.parent = @parent
    @parent.children.insert_after(@, child)
  
  insert_child: (child) ->
    @children.push child
  
  get_previous_sibling: ->
    @parent.previous @
  
  get_next_sibling: ->
    @parent.next @
  
  # Push a child object. If the child belongs further down the hierarchy
  # it will inturn push it to the correct child. It is important that
  # lines is pushed in the order they arrive in the original file.
  push: (child) ->
    # Row is not valid for my node if it has lower indent then me
    return false if child.indent <= @indent
    # Try to append row to one of my children.
    return true if @last_child and @last_child.push(child)
    # If that fails, it belongs to me
    @children.push @last_child = child
    child.parent = @
    true
    
  # Set translation
  my_translation: () ->
    @translation or @parent.my_translation()
  

  # Returns true if this is a workspace element
  is_workspace: () ->
    @is_workspace
  

  # Set the workspace coordinates and turns this element into a workspace.
  set_workspace: (x, y, width, height) ->
    @args.transform = "translate(#{x},#{y})"
    @args.width     = width
    @args.height    = height
    @translation    = x:x, y:y
    @is_workspace   = true
  

  # Set parent group translation.
  set_translate: (x, y) ->
    ws = @my_translation()
    x -= ws.x
    y -= ws.y
    @translation = x:x, y:y
    @args.transform = "translate(#{x},#{y})"
  

  # Invalidate this element. If element is invalidatet it should not show
  # in output.
  invalidate: () ->
    @invalidated = true
  

  # Iterate through all children and their children.
  each_child_deep: (f) ->
    ((c) -> 
      f(c)
      child.each_child_deep(f)
    )(child) for child in @children
  

  # Construct a name by concatinate all parents names with self name.
  name_deep: () ->
    "svg-" + if @tag.parent
        "#{@tag.parent.name_deep()}-#{@tag.id}"
      else 
        "#{@tag.id}"
  
  
  @lines_in_files: (files, f, finished) ->
    each_jade_in_files files, (file) ->
      each_line file
        , (text_line) -> 
          f new Line(file, text_line)
        , finished
  
  @nodes_in_files: (files, f, finished) ->
    result = {}
    Line.lines_in_files files, (line) ->
        result[line.file] or= new Line("root#svg")
        result[line.file].push line
        f(line)
      , finished
  


# Map old gradient ID with new unique ID.
unique_mapper = {}

loop_files = (files, out_dir) ->
  # Loop all lines in folder 'path'
  indent_adjust = null
  
  Line.nodes_in_files files
    , (line) ->
      result        = null
      gradient_rex  = /lineargradient/i
      url_rex       = /url\(#([^\)]+)\)/i
      workspace_rex = /workspace/i
      translate_rex = /translate/i
      rect_rex      = /rect/i
      state_rex     = /state\(([^\)]+)/
      numbered_id_rex = /_\d+_/g

      new_sibling_before = (str) ->
        new_line = new Line(line.file, str)
        new_line.parent = line.parent
        line.insert_sibling_before line, new_line
        new_line
      
      new_child = (str) ->
        new_line = new Line(line.file, str)
        new_line.parent = line
        line.push new_line
        new_line
      
      # Remove any impropper unique id from class names
      line.tag.classes = (cls.replace(numbered_id_rex, '') for cls in line.tag.classes)
      
      # Check to see if we have a state-line
      if state_rex.test line.tag.id
        value_name  = state_rex.exec(line.tag.id)[1]
        var_name    = line.parent.tag.id.replace(/-/g, '_').replace(/[\$\(\)]/g, '') if line.parent.tag.id
        indent      = ' '.repeat(line.indent)
        line.reconstruct "#{indent}- if(#{var_name} == '#{value_name}')"
      
      # If we have a display argument, convert it to a display style instead
      if line.args.display
        if line.args.style
          line.args.style = "#{line.args.style.rstrip(';')};display:#{line.args.display};"
        else
          line.args.style = "display:#{line.args.display};"
          
        line.args.display = null
      
      # Generate new unique id for gradient so that they don't take out eachother.
      if gradient_rex.test line.tag.name
        unique                      = uid()
        unique_mapper[line.tag.id]  = unique
        line.tag.id                 = unique
        
      # Removing unique staples on id is only valid if it's not a gradient
      else if numbered_id_rex.test line.tag.id
        line.tag.id = line.tag.id.replace(numbered_id_rex, '')
      
      # Generate embeded HTML. Test to see if rect tag.
      if rect_rex.test line.tag.name
        # Test to see if we have an assignment in ID
        if line.tag.assignment != null
          if numbered_id_rex.test line.tag.assignment.identifier
            line.tag.assignment.identifier = line.tag.assignment.identifier.replace(numbered_id_rex, '')
          
          assignment = line.tag.assignment.identifier
          instruction = line.tag.assignment.instruction
          x       = line.args.x
          y       = line.args.y
          width   = line.args.width
          height  = line.args.height
          ind     = ' '.repeat(line.indent + INDENT)

          valign  = ['top',   'middle', 'bottom'].best_of(line.tag.classes)
          halign  = ['left',  'center', 'right'].best_of(line.tag.classes)
          
          line.tag.classes.remove valign
          line.tag.classes.remove halign            

          classes = ".#{line.tag.classes.join('.')}" if line.tag.classes.length > 0

          line.reconstruct("#{ind}foreignObject(x='#{x}', y='#{y}', width='#{width}', height='#{height}')")

          new_child "#{ind} body(xmlns='http://www.w3.org/1999/xhtml')"
          new_child "#{ind}  div(style='display:table;height:#{height}px;width:#{width}px;overflow:hidden;')"
          new_child "#{ind}   div#{classes}(style='display:table-cell;vertical-align:#{valign};text-align:#{halign};')"
          new_child "#{ind}    #{instruction} #{assignment}"
    
      
      # Update fill params that points to gradient id
      if url_rex.test line.args.fill
        id = unique_mapper[url_rex.exec(line.args.fill)[1]]
        line.args.fill = "url(##{id})"
      
      # If line tag id contains 'workspace', we know it's a displacement element
      # and we know that the parent is a root element. Root elements shall be
      # pushed into workspaces array.
      if workspace_rex.test line.tag.id
        line.args.x or= 0
        line.args.y or= 0
      
        line.parent.set_workspace(0-parseFloat(line.args.x), 0-parseFloat(line.args.y), line.args.width, line.args.height)
        line.invalidate()
            
        # If line is a workspace definition, then we return parent line
        # so that it can be used as root for a partial.
        result = line.parent
        
      # If line tag id contains 'translate', we know that we should realign
      # parent element with the amount defined in the translation element.
      if translate_rex.test line.tag.id
        line.args.x or= 0
        line.args.y or= 0
    
        line.parent.set_translate(0-parseFloat(line.args.x), 0-parseFloat(line.args.y))
        line.invalidate()
    
      # If line has a value, we know that it is free text. Any free text might
      # contain variables. If so, we need to extract variables and split lines
      # around variables.
      if line.value and /{{([^}]+)}}/.test(line.value)
        val         = line.value
        line.value  = ""
        ind         = ' '.repeat(line.indent + INDENT)
        while match = /{{([^\}]+)}}/.exec(val)
          split = val.split(match[0])
          split[0] = split[0].trim('\\s\\t')
          split[1] = split[1].trim('\\s\\t')

          # Add the neccesery lines
          new_child("#{ind}| #{split[0].trim('\t\s')}") if split[0] and split[0] != ""
          new_child "#{ind}= #{match[1].trim()}"
          val = split[1]
          
      result
    , (workspaces) -> 
      # All lines in a given file is fully read, now we can write any workspaces
      # available
      ((ws) ->
        deep_name = ws.name_deep().replace(/[\$\(\)]/g, '')
        console.log "Writing workspace '#{deep_name}.jade'"
        stream = fs.createWriteStream("#{out_dir}/#{deep_name}.jade")
        stream.once 'open', (fd) ->
          indent_adjust = ws.indent
          stream.write "#{ws.to_s(0-indent_adjust, false)}\n"
          ws.each_child_deep (line) ->
            stream.write "#{line.to_s(0-indent_adjust, false)}\n" if not line.invalidated
          
      )(workspace) for workspace in workspaces
